const express = require('express');
const router = express.Router();
const Expense = require('../models/Expense');
const Revenue = require('../models/Revenue');
const Budget = require('../models/Budget');
const { protect } = require('../middleware/auth');

// Utilitaire pour normaliser la question
function normalize(str) {
  return (str || '').toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}

// Calcul pour les simulations financi√®res
function calculateMonthlySavings(targetAmount, months) {
  return (targetAmount / months).toFixed(2);
}

router.post('/', protect, async (req, res) => {
  const { message } = req.body;
  const userId = req.user._id;
  const q = normalize(message);

  try {
    // Salutations
    if (/(bonjour|salut|coucou|hello|bonsoir)/.test(q)) {
      return res.json({ response: "Bonjour ! Je suis ton assistant financier. Pose-moi une question sur tes d√©penses, revenus, budgets, ou objectifs üòä" });
    }

    // D√©penses par cat√©gorie
    if (/depens[√©e].*alimentation.*mois/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), 1);
      const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
      const total = await Expense.aggregate([
        { $match: { user: userId, category: 'alimentation', date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Tu as d√©pens√© ${sum.toFixed(2)} DT en alimentation ce mois-ci.` });
    }
    if (/depens[√©e].*transport.*semaine derniere/.test(q)) {
      const now = new Date();
      const start = new Date(now);
      start.setDate(now.getDate() - now.getDay() - 7);
      start.setHours(0, 0, 0, 0);
      const end = new Date(start);
      end.setDate(start.getDate() + 6);
      end.setHours(23, 59, 59, 999);
      const total = await Expense.aggregate([
        { $match: { user: userId, category: 'transport', date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Tu as d√©pens√© ${sum.toFixed(2)} DT en transport la semaine derni√®re.` });
    }
    if (/depens[√©e].*loisir.*avril/.test(q)) {
      const year = new Date().getFullYear();
      const start = new Date(year, 3, 1);
      const end = new Date(year, 4, 0, 23, 59, 59, 999);
      const total = await Expense.aggregate([
        { $match: { user: userId, category: 'loisir', date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Tu as d√©pens√© ${sum.toFixed(2)} DT en loisirs en avril.` });
    }
    if (/depens[√©e].*abonnement/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), 1);
      const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
      const total = await Expense.aggregate([
        { $match: { user: userId, category: 'abonnement', date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Tu as d√©pens√© ${sum.toFixed(2)} DT pour les abonnements ce mois-ci.` });
    }
    if (/depens[√©e].*shopping/.test(q)) {
      const total = await Expense.aggregate([
        { $match: { user: userId, category: 'shopping' } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Tu as d√©pens√© ${sum.toFixed(2)} DT dans la cat√©gorie shopping depuis toujours.` });
    }

    // D√©penses par p√©riode
    if (/depens[√©e].*aujourd'hui/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
      const end = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);
      const total = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Aujourd'hui, tu as d√©pens√© ${sum.toFixed(2)} DT.` });
    }
    if (/depens[√©e].*cette.*semaine/.test(q)) {
      const now = new Date();
      const start = new Date(now);
      start.setDate(now.getDate() - now.getDay());
      start.setHours(0, 0, 0, 0);
      const end = new Date(now);
      end.setHours(23, 59, 59, 999);
      const total = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Cette semaine, tu as d√©pens√© ${sum.toFixed(2)} DT.` });
    }
    if (/depens[√©e].*mois dernier/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      const end = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59, 999);
      const total = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Le mois dernier, tu as d√©pens√© ${sum.toFixed(2)} DT.` });
    }
    if (/depens[√©e].*debut.*annee/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), 0, 1);
      const end = new Date();
      const total = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Depuis le d√©but de l'ann√©e, tu as d√©pens√© ${sum.toFixed(2)} DT.` });
    }
    if (/depens[√©e].*3 derniers mois/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth() - 2, 1);
      const end = new Date();
      const total = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Sur les 3 derniers mois, tu as d√©pens√© ${sum.toFixed(2)} DT.` });
    }

    // D√©penses globales
    if (/total.*depens[√©e]/.test(q)) {
      const total = await Expense.aggregate([
        { $match: { user: userId } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Ton total de d√©penses est de ${sum.toFixed(2)} DT.` });
    }
    if (/ou.*depens[√©e].*plus/.test(q)) {
      const agg = await Expense.aggregate([
        { $match: { user: userId } },
        { $group: { _id: '$category', sum: { $sum: '$amount' } } },
        { $sort: { sum: -1 } },
        { $limit: 1 }
      ]);
      const cat = agg[0]?._id || 'aucune cat√©gorie';
      const sum = agg[0]?.sum || 0;
      return res.json({ response: `Tu d√©penses le plus en ${cat} (${sum.toFixed(2)} DT).` });
    }
    if (/plus grosse depense/.test(q)) {
      const agg = await Expense.find({ user: userId }).sort({ amount: -1 }).limit(1);
      if (agg.length === 0) return res.json({ response: "Aucune d√©pense trouv√©e." });
      return res.json({ response: `Ta plus grosse d√©pense est de ${agg[0].amount.toFixed(2)} DT en ${agg[0].category} le ${new Date(agg[0].date).toLocaleDateString('fr-FR')}.` });
    }
    if (/5 dernieres depens[√©e]/.test(q)) {
      const agg = await Expense.find({ user: userId }).sort({ date: -1 }).limit(5);
      if (agg.length === 0) return res.json({ response: "Aucune d√©pense trouv√©e." });
      const list = agg.map(e => `${e.amount.toFixed(2)} DT (${e.category}, ${new Date(e.date).toLocaleDateString('fr-FR')})`).join(', ');
      return res.json({ response: `Voici tes 5 derni√®res d√©penses : ${list}.` });
    }

    // Revenus
    if (/revenu.*mois/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), 1);
      const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
      const total = await Revenue.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Tes revenus ce mois-ci sont de ${sum.toFixed(2)} DT.` });
    }
    if (/gagn[√©e].*mois dernier/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      const end = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59, 999);
      const total = await Revenue.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Le mois dernier, tu as gagn√© ${sum.toFixed(2)} DT.` });
    }
    if (/source principale.*revenu/.test(q)) {
      const agg = await Revenue.aggregate([
        { $match: { user: userId } },
        { $group: { _id: '$category', sum: { $sum: '$amount' } } },
        { $sort: { sum: -1 } },
        { $limit: 1 }
      ]);
      const cat = agg[0]?._id || 'aucune source';
      const sum = agg[0]?.sum || 0;
      return res.json({ response: `Ta source principale de revenus est ${cat} (${sum.toFixed(2)} DT).` });
    }
    if (/recu.*cette semaine/.test(q)) {
      const now = new Date();
      const start = new Date(now);
      start.setDate(now.getDate() - now.getDay());
      start.setHours(0, 0, 0, 0);
      const end = new Date(now);
      end.setHours(23, 59, 59, 999);
      const total = await Revenue.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: `Cette semaine, tu as re√ßu ${sum.toFixed(2)} DT.` });
    }
    if (/entrees.*argent.*2025/.test(q)) {
      const start = new Date(2025, 0, 1);
      const end = new Date(2025, 11, 31, 23, 59, 59, 999);
      const total = await Revenue.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: '$category', sum: { $sum: '$amount' } } }
      ]);
      if (!total.length) return res.json({ response: "Aucun revenu enregistr√© pour 2025." });
      const totalSum = total.reduce((acc, curr) => acc + curr.sum, 0);
      const breakdown = total.map(t => `${t._id}: ${t.sum.toFixed(2)} DT`).join(', ');
      return res.json({ response: `En 2025, tes entr√©es d'argent s'√©l√®vent √† ${totalSum.toFixed(2)} DT. R√©partition : ${breakdown}.` });
    }

    // Soldes / budgets
    if (/solde actuel/.test(q)) {
      const totalRevenues = await Revenue.aggregate([
        { $match: { user: userId } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const totalExpenses = await Expense.aggregate([
        { $match: { user: userId } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const solde = (totalRevenues[0]?.sum || 0) - (totalExpenses[0]?.sum || 0);
      return res.json({ response: `Ton solde actuel est de ${solde.toFixed(2)} DT.` });
    }
    if (/reste.*budget.*alimentation/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), 1);
      const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
      const budget = await Budget.findOne({ user: userId, category: 'alimentation' });
      if (!budget) return res.json({ response: "Tu n'as pas de budget alimentation d√©fini." });
      const totalExpenses = await Expense.aggregate([
        { $match: { user: userId, category: 'alimentation', date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const reste = budget.amount - (totalExpenses[0]?.sum || 0);
      return res.json({ response: `Il te reste ${reste.toFixed(2)} DT sur ton budget alimentation ce mois-ci.` });
    }
    if (/dans.*budget.*mois/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), 1);
      const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
      const budget = await Budget.findOne({ user: userId });
      if (!budget) return res.json({ response: "Tu n'as pas de budget d√©fini pour ce mois." });
      const totalExpenses = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const spent = totalExpenses[0]?.sum || 0;
      const percentage = (spent / budget.amount) * 100;
      return res.json({ response: spent <= budget.amount 
        ? `Oui, tu es dans ton budget ce mois-ci (${percentage.toFixed(1)}% utilis√©).` 
        : `Non, tu as d√©pass√© ton budget de ${(spent - budget.amount).toFixed(2)} DT.` });
    }
    if (/budget.*mois/.test(q)) {
      const budget = await Budget.findOne({ user: userId });
      if (!budget) return res.json({ response: "Tu n'as pas de budget d√©fini pour ce mois." });
      return res.json({ response: `Ton budget pour ce mois est de ${budget.amount.toFixed(2)} DT.` });
    }
    if (/depass[√©e].*budget/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), 1);
      const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
      const budget = await Budget.findOne({ user: userId });
      if (!budget) return res.json({ response: "Tu n'as pas de budget d√©fini." });
      const totalExpenses = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const spent = totalExpenses[0]?.sum || 0;
      return res.json({ response: spent > budget.amount 
        ? `Oui, tu as d√©pass√© ton budget de ${(spent - budget.amount).toFixed(2)} DT.` 
        : `Non, tu es dans ton budget (reste ${(budget.amount - spent).toFixed(2)} DT).` });
    }

    // Simulations / objectifs financiers
    if (/voiture.*20000.*2026/.test(q)) {
      const target = 20000;
      const months = (new Date(2026, 11, 31) - new Date()) / (1000 * 60 * 60 * 24 * 30);
      const monthly = calculateMonthlySavings(target, months);
      return res.json({ response: `Pour acheter une voiture √† 20 000 DT d'ici fin 2026, tu dois √©conomiser environ ${monthly} DT par mois.` });
    }
    if (/economiser.*10000.*2 ans/.test(q)) {
      const target = 10000;
      const months = 24;
      const monthly = calculateMonthlySavings(target, months);
      return res.json({ response: `Pour √©conomiser 10 000 DT en 2 ans, tu dois mettre de c√¥t√© ${monthly} DT par mois.` });
    }
    if (/voyage.*juillet.*2025.*3000/.test(q)) {
      const target = 3000;
      const months = (new Date(2025, 6, 1) - new Date()) / (1000 * 60 * 60 * 24 * 30);
      const monthly = calculateMonthlySavings(target, months);
      return res.json({ response: `Pour ton voyage √† 3 000 DT en juillet 2025, √©conomise ${monthly} DT par mois. Commence par r√©duire tes d√©penses non essentielles, comme les loisirs.` });
    }
    if (/ordinateur.*1500.*6 mois/.test(q)) {
      const target = 1500;
      const months = 6;
      const monthly = calculateMonthlySavings(target, months);
      return res.json({ response: `Pour acheter un ordinateur √† 1 500 DT en 6 mois, mets de c√¥t√© ${monthly} DT par mois.` });
    }
    if (/economiser.*5000.*an/.test(q)) {
      const target = 5000;
      const months = 12;
      const monthly = calculateMonthlySavings(target, months);
      return res.json({ response: `Pour √©conomiser 5 000 DT en un an, tu dois mettre de c√¥t√© ${monthly} DT par mois. Essaie d‚Äôautomatiser une √©pargne mensuelle.` });
    }

    // Habitudes
    if (/depense moyenne par mois/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), 0, 1);
      const end = new Date();
      const agg = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: { $month: '$date' }, sum: { $sum: '$amount' } } }
      ]);
      if (!agg.length) return res.json({ response: "Pas assez de donn√©es pour calculer la moyenne." });
      const moyenne = agg.reduce((acc, cur) => acc + cur.sum, 0) / agg.length;
      return res.json({ response: `Ta d√©pense moyenne par mois est de ${moyenne.toFixed(2)} DT.` });
    }
    if (/depens[√©e].*plus.*mois dernier/.test(q)) {
      const now = new Date();
      const currentMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);
      const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59, 999);
      const current = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: currentMonthStart, $lte: now } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const last = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: lastMonthStart, $lte: lastMonthEnd } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const currentSum = current[0]?.sum || 0;
      const lastSum = last[0]?.sum || 0;
      return res.json({ response: currentSum > lastSum 
        ? `Oui, tu d√©penses plus ce mois-ci (${currentSum.toFixed(2)} DT) que le mois dernier (${lastSum.toFixed(2)} DT).` 
        : `Non, tu d√©penses moins ce mois-ci (${currentSum.toFixed(2)} DT) que le mois dernier (${lastSum.toFixed(2)} DT).` });
    }
    if (/depens[√©e].*trop.*nourriture/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), 1);
      const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
      const budget = await Budget.findOne({ user: userId, category: 'alimentation' });
      const total = await Expense.aggregate([
        { $match: { user: userId, category: 'alimentation', date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      if (!budget) return res.json({ response: `Tu as d√©pens√© ${sum.toFixed(2)} DT en alimentation, mais aucun budget n'est d√©fini pour comparer.` });
      return res.json({ response: sum > budget.amount 
        ? `Oui, tu d√©penses trop en alimentation (${sum.toFixed(2)} DT, d√©passement de ${(sum - budget.amount).toFixed(2)} DT).` 
        : `Non, tu es dans ton budget alimentation (${sum.toFixed(2)} DT sur ${budget.amount.toFixed(2)} DT).` });
    }
    if (/trop depens[√©e]/.test(q)) {
      const now = new Date();
      const start = new Date(now.getFullYear(), now.getMonth(), 1);
      const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
      const budget = await Budget.findOne({ user: userId });
      if (!budget) return res.json({ response: "Aucun budget d√©fini pour comparer." });
      const total = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: start, $lte: end } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const sum = total[0]?.sum || 0;
      return res.json({ response: sum > budget.amount 
        ? `Oui, tu d√©penses trop ce mois-ci (${sum.toFixed(2)} DT, d√©passement de ${(sum - budget.amount).toFixed(2)} DT).` 
        : `Non, tu es dans ton budget (${sum.toFixed(2)} DT sur ${budget.amount.toFixed(2)} DT).` });
    }
    if (/depens[√©e].*augmentent/.test(q)) {
      const now = new Date();
      const thisMonth = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: new Date(now.getFullYear(), now.getMonth(), 1), $lte: now } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const lastMonth = await Expense.aggregate([
        { $match: { user: userId, date: { $gte: new Date(now.getFullYear(), now.getMonth() - 1, 1), $lte: new Date(now.getFullYear(), now.getMonth(), 0) } } },
        { $group: { _id: null, sum: { $sum: '$amount' } } }
      ]);
      const thisSum = thisMonth[0]?.sum || 0;
      const lastSum = lastMonth[0]?.sum || 0;
      return res.json({ response: thisSum > lastSum 
        ? `Oui, tes d√©penses augmentent ce mois-ci (${thisSum.toFixed(2)} DT contre ${lastSum.toFixed(2)} DT le mois dernier).` 
        : `Non, tes d√©penses n'augmentent pas (${thisSum.toFixed(2)} DT ce mois-ci, contre ${lastSum.toFixed(2)} DT le mois dernier).` });
    }

    // Aide / g√©n√©ral
    if (/comment ajouter une depense/.test(q)) {
      return res.json({ response: "Pour ajouter une d√©pense, clique sur '+ D√©pense' dans l'app, saisis le montant, la cat√©gorie (ex. alimentation) et la date, puis valide." });
    }
    if (/comment supprimer une transaction/.test(q)) {
      return res.json({ response: "Pour supprimer une transaction, va dans l'onglet 'Transactions', s√©lectionne la d√©pense ou le revenu √† supprimer, et clique sur l'ic√¥ne de suppression." });
    }
    if (/comment creer.*objectif.*epargne/.test(q)) {
      return res.json({ response: "Pour cr√©er un objectif d'√©pargne, va dans 'Objectifs', clique sur 'Nouveau', saisis le montant cible, la date butoir, et active les rappels si besoin." });
    }
    if (/comment fonctionne.*budget mensuel/.test(q)) {
      return res.json({ response: "Le budget mensuel te permet de d√©finir une limite de d√©penses par cat√©gorie. Va dans 'Budgets', ajoute un budget pour une cat√©gorie (ex. alimentation), et suis tes d√©penses pour rester dans la limite." });
    }
    if (/fonctionnalites.*application/.test(q)) {
      return res.json({ response: "L'application permet de : suivre tes d√©penses et revenus, g√©rer des budgets par cat√©gorie, d√©finir des objectifs d'√©pargne, voir des rapports sur tes habitudes, et interagir avec moi pour des analyses rapides !" });
    }

    // Commandes
    if (/ajoute.*depense.*(\d+\.?\d*).*(alimentation|transport|loisir|abonnement|shopping)/.test(q)) {
      const match = q.match(/(\d+\.?\d*).*(alimentation|transport|loisir|abonnement|shopping)/);
      const amount = parseFloat(match[1]);
      const category = match[2];
      const expense = new Expense({ user: userId, amount, category, date: new Date() });
      await expense.save();
      return res.json({ response: `D√©pense de ${amount.toFixed(2)} DT en ${category} ajout√©e avec succ√®s.` });
    }
    if (/note.*entree.*(\d+\.?\d*).*(salaire|freelance|autre)/.test(q)) {
      const match = q.match(/(\d+\.?\d*).*(salaire|freelance|autre)/);
      const amount = parseFloat(match[1]);
      const category = match[2];
      const revenue = new Revenue({ user: userId, amount, category, date: new Date() });
      await revenue.save();
      return res.json({ response: `Entr√©e de ${amount.toFixed(2)} DT pour ${category} not√©e avec succ√®s.` });
    }
    if (/supprime.*derniere.*depense/.test(q)) {
      const expense = await Expense.findOne({ user: userId }).sort({ date: -1 });
      if (!expense) return res.json({ response: "Aucune d√©pense √† supprimer." });
      await Expense.deleteOne({ _id: expense._id });
      return res.json({ response: `Derni√®re d√©pense de ${expense.amount.toFixed(2)} DT (${expense.category}) supprim√©e.` });
    }
    if (/affiche.*transactions recentes/.test(q)) {
      const expenses = await Expense.find({ user: userId }).sort({ date: -1 }).limit(5);
      const revenues = await Revenue.find({ user: userId }).sort({ date: -1 }).limit(5);
      const transactions = [...expenses, ...revenues].sort((a, b) => b.date - a.date).slice(0, 5);
      if (!transactions.length) return res.json({ response: "Aucune transaction r√©cente." });
      const list = transactions.map(t => `${t.amount.toFixed(2)} DT (${t.category}, ${t instanceof Expense ? 'd√©pense' : 'revenu'}, ${new Date(t.date).toLocaleDateString('fr-FR')})`).join(', ');
      return res.json({ response: `Voici tes transactions r√©centes : ${list}.` });
    }
    if (/rappelle.*comptes.*semaine/.test(q)) {
      return res.json({ response: "Rappel activ√© ! Je te rappellerai chaque semaine de v√©rifier tes comptes. Va dans les param√®tres pour personnaliser les notifications." });
    }

    // Par d√©faut
    return res.json({ response: "D√©sol√©, je n'ai pas compris ta question. Essaie de reformuler ou tape 'fonctionnalit√©s' pour d√©couvrir ce que je peux faire !" });
  } catch (err) {
    console.error('Erreur chatbot:', err);
    return res.status(500).json({ response: "Erreur interne du serveur. R√©essaie plus tard." });
  }
});

module.exports = router;